{"version":3,"sources":["tourette.js","renderer.js"],"names":["timer","authorsList","_id","name","generateRandomString","Math","random","toString","substring","generateRandomInt","min","max","floor","getRandomAuthor","authorShout","element","author","text","event","CustomEvent","detail","dispatchEvent","startDispatching","clearInterval","func","interval","setInterval","stopDispatching","authorsListState","Map","elements","document","querySelector","getElementsByClassName","appendListItem","item","createElement","classList","add","get","appendChild","updateAuthorsList","has","timesShouted","set","renderCurrentAuthor","currentAuthorElement","textContent","setTimeout","remove","renderAuthorsList","listElements","authorsIterator","entries","next","value","counter","renderStatusMessage","isDispatchingEnabled","statusMessageElement","innerHTML","animateContentBlockExpansion","onAuthorShout","onBtnClick","preventDefault","stopPropagation","target","contains","addEventListener"],"mappings":";AAiDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,QAAA,sBAAA,EA5CA,IAmCIA,EAnCEC,EAAc,CAClB,CACEC,IAAK,EACLC,KAAM,QAER,CACED,IAAK,EACLC,KAAM,OAER,CACED,IAAK,EACLC,KAAM,UAIJC,EAAuB,WAAMC,OAAAA,KAAKC,SAASC,SAAS,IAAIC,UAAU,IAElEC,EAAoB,SAACC,EAAKC,GAAQN,OAAAA,KAAKO,MAAMP,KAAKC,UAAYK,EAAMD,EAAM,GAAKA,IAE/EG,EAAkB,WAAMZ,OAAAA,EAAYQ,EAAkB,EAAG,IAAIN,MAG7DW,EAAc,SAAAC,GAAW,OAAA,WACvBC,IAAAA,EAASH,IACTI,EAAOb,IACPc,EAAQ,IAAIC,YAAY,QAAS,CACrCC,OAAQ,CACNJ,OAAAA,EACAC,KAAAA,KAGJF,EAAQM,cAAcH,KAMlBI,EAAmB,SAACP,GACxBQ,cAAcvB,GACRwB,IAAAA,EAAOV,EAAYC,GACnBU,EAAqC,IAA1BhB,EAAkB,EAAG,GACtCT,EAAQ0B,YAAYF,EAAMC,IAG5B,QAAA,iBAAA,EAAA,IAAME,EAAkB,WACtBJ,cAAcvB,IADhB,QAAA,gBAAA;;ACgDA,aAzFA,IAAA,EAAA,QAAA,iBAyFA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAnFA,IAAM4B,EAAmB,IAAIC,IAGvBC,EAAW,IAAID,IAAI,CACvB,CAAC,UAAWE,SAASC,cAAc,aACnC,CAAC,YAAaD,SAASC,cAAc,aACrC,CAAC,gBAAiBD,SAASC,cAAc,qBACzC,CAAC,cAAeD,SAASC,cAAc,kBAEvC,CAAC,mBAAoBD,SAASE,uBAAuB,uBACrD,CAAC,gBAAiBF,SAASC,cAAc,cAGrCE,EAAiB,WACfC,IAAAA,EAAOJ,SAASK,cAAc,MACpCD,EAAKE,UAAUC,IAAI,sBACnBR,EAASS,IAAI,eAAeC,YAAYL,IAGpCM,EAAoB,SAACzB,GACrBY,GAAAA,EAAiBc,IAAI1B,GAAS,CAE1B2B,IAAAA,EAAef,EAAiBW,IAAIvB,GAAU,EACpDY,EAAiBgB,IAAI5B,EAAQ2B,QAE7Bf,EAAiBgB,IAAI5B,EAAQ,GAC7BkB,KAIEW,EAAsB,SAAC7B,EAAQC,GAC7B6B,IAAAA,EAAuBhB,EAASS,IAAI,iBAC1CO,EAAqBC,YAAiB/B,GAAAA,OAAAA,EAAuCC,kCAAAA,OAAAA,EAFjC,KAI5C6B,EAAqBT,UAAUC,IAAI,uBACnCU,WAAW,WACTF,EAAqBT,UAAUY,OAAO,wBACrC,MAGCC,EAAoB,WAClBC,IAAAA,EAAerB,EAASS,IAAI,oBAC5Ba,EAAkBxB,EAAiByB,UAFX,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAGRF,IAAAA,IAAc,EAAdA,EAAAA,EAAc,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAzBpC,IAAAA,EAAyB,EAAA,MAERqC,EAAAA,EAAAA,EAAgBE,OAAOC,MAFf,GAE3BvC,EAF2B,EAAA,GAEnBwC,EAFmB,EAAA,GAGlCzC,EAAQgC,YAAiB/B,GAAAA,OAAAA,EAAkBwC,aAAAA,OAAAA,EAA3C,WAN4B,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAU1BC,EAAsB,SAACC,GACrBC,IAAAA,EAAuB7B,EAASS,IAAI,iBAExCoB,EAAqBC,UADnBF,EAC+B,sFAEA,qFAI/BG,EAA+B,WACnC/B,EAASS,IAAI,WAAWF,UAAUC,IAAI,qBAGlCwB,EAAgB,SAAC5C,GACIA,IAAAA,EAAAA,EAAME,OAAvBJ,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,KAChB4B,EAAoB7B,EAAQC,GAC5BwB,EAAkBzB,GAClBkC,KAGIa,EAAa,SAAC7C,GAClBA,EAAM8C,iBACN9C,EAAM+C,kBACF/C,EAAMgD,OAAO7B,UAAU8B,SAAS,kBAClCN,IACAJ,GAAoB,IACH3B,EAAAA,EAAAA,kBAAAA,EAASS,IAAI,mBACrBrB,EAAMgD,OAAO7B,UAAU8B,SAAS,kBACzCV,GAAoB,IACpB,EAAA,EAAA,qBAIJ1B,SAASqC,iBAAiB,mBAAoB,WAC5CtC,EAASS,IAAI,iBAAiB6B,iBAAiB,QAASN,GACxDhC,EAASS,IAAI,aAAa6B,iBAAiB,QAASL","file":"renderer.js","sourceRoot":"..","sourcesContent":["/*\nCreate CustomEvent with name shout and detail with the random author (from authorsList) and\nrandomly generated text.\nThe script will dispatch the event on a random interval (1-5 seconds)\n*/\nconst authorsList = [\n  {\n    _id: 1,\n    name: 'Todd',\n  },\n  {\n    _id: 3,\n    name: 'Rob',\n  },\n  {\n    _id: 3,\n    name: 'Sevil',\n  },\n];\n\nconst generateRandomString = () => Math.random().toString(36).substring(7);\n\nconst generateRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n\nconst getRandomAuthor = () => authorsList[generateRandomInt(0, 2)].name;\n\n// create a closure to keep the reference to the DOM element\nconst authorShout = element => () => {\n  const author = getRandomAuthor();\n  const text = generateRandomString();\n  const event = new CustomEvent('shout', {\n    detail: {\n      author,\n      text,\n    },\n  });\n  element.dispatchEvent(event);\n};\n\n// keep a global reference to clear the interval when needed\nlet timer;\n\nconst startDispatching = (element) => {\n  clearInterval(timer); // prevents from several setIntervals working at the same time\n  const func = authorShout(element);\n  const interval = generateRandomInt(1, 5) * 1000;\n  timer = setInterval(func, interval);\n};\n\nconst stopDispatching = () => {\n  clearInterval(timer);\n};\n\nexport {\n  startDispatching,\n  stopDispatching,\n};\n","/*\nListen to dispatched Event shout.\nAdd to the page caught shout with author name and text.\nAdd to the page the list of authors with the count of shouts.\nBONUS:\nOn each new Event shout the new element should be highlighted for 1 second\nAdd ability to stop event dispatching\n*/\nimport {\n  startDispatching,\n  stopDispatching,\n} from './tourette.js';\n\n// stores all authors with corresponding numbers of shouts\nconst authorsListState = new Map();\n\n// stores all necessary references to DOM elements\nconst elements = new Map([\n  ['content', document.querySelector('.content')],\n  ['buttonBar', document.querySelector('.btn-bar')],\n  ['currentAuthor', document.querySelector('.authors-current')],\n  ['authorsList', document.querySelector('.authors-list')],\n  // use getElementsByClassName to store live collection of LI elements\n  ['authorsListItems', document.getElementsByClassName('.authors-list_item')],\n  ['statusMessage', document.querySelector('.status')],\n]);\n\nconst appendListItem = () => {\n  const item = document.createElement('LI');\n  item.classList.add('.authors-list_item');\n  elements.get('authorsList').appendChild(item);\n};\n\nconst updateAuthorsList = (author) => {\n  if (authorsListState.has(author)) {\n    // if the author shouted earlier increase the shouts counter\n    const timesShouted = authorsListState.get(author) + 1;\n    authorsListState.set(author, timesShouted);\n  } else {\n    authorsListState.set(author, 1); // else author shouts for the first time\n    appendListItem(); // append new element to DOM if there's a new author\n  }\n};\n\nconst renderCurrentAuthor = (author, text) => {\n  const currentAuthorElement = elements.get('currentAuthor');\n  currentAuthorElement.textContent = `${author} has just shouted the phrase \"${text}\"`;\n  // highlight text for 1 second\n  currentAuthorElement.classList.add('is-text-highlighted');\n  setTimeout(() => {\n    currentAuthorElement.classList.remove('is-text-highlighted');\n  }, 1000);\n};\n\nconst renderAuthorsList = () => {\n  const listElements = elements.get('authorsListItems');\n  const authorsIterator = authorsListState.entries();\n  for (const element of listElements) {\n    // iterator.next().value returns key and value in a form of array\n    const [author, counter] = authorsIterator.next().value;\n    element.textContent = `${author} shouted ${counter} times`;\n  }\n};\n\nconst renderStatusMessage = (isDispatchingEnabled) => {\n  const statusMessageElement = elements.get('statusMessage');\n  if (isDispatchingEnabled) {\n    statusMessageElement.innerHTML = 'Dispatching is now <span class=\"is-text-green\">enabled</span>. You can turn it off.';\n  } else {\n    statusMessageElement.innerHTML = 'Dispatching is now <span class=\"is-text-red\">disabled</span>. You can turn it on.';\n  }\n};\n\nconst animateContentBlockExpansion = () => {\n  elements.get('content').classList.add('content-expanded');\n};\n\nconst onAuthorShout = (event) => {\n  const { author, text } = event.detail;\n  renderCurrentAuthor(author, text);\n  updateAuthorsList(author);\n  renderAuthorsList();\n};\n\nconst onBtnClick = (event) => {\n  event.preventDefault();\n  event.stopPropagation();\n  if (event.target.classList.contains('btn-bar_start')) {\n    animateContentBlockExpansion();\n    renderStatusMessage(true);\n    startDispatching(elements.get('currentAuthor'));\n  } else if (event.target.classList.contains('btn-bar_stop')) {\n    renderStatusMessage(false);\n    stopDispatching();\n  }\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  elements.get('currentAuthor').addEventListener('shout', onAuthorShout);\n  elements.get('buttonBar').addEventListener('click', onBtnClick);\n});\n"]}